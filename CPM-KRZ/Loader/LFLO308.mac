	TITLE	30.01.1986 Lade-ROM fuer Floppy 8" an AFS 5121 (308k-Disketten)
	.z80

ladadr	equ	0c000h		; Ladeadresse
ladlen	equ	4000h
reclen	equ	1024
startad	equ	0c885h
secanz	equ	4		; Anzahl der phys. Sektoren pro Spur
fladr	equ	0d8h

	.phase	0

start::	ld	sp,spber
	ld	hl,0
start1::dec	hl
	ld	a,l
	or	h
	jr	nz,start1
	ld	hl,stw   	;anfangslader:pio-initialisierung
	ld	c,fladr+2	;adresse pio 1
	outi	         	;mode0
	outi
	inc	c
	outi        		;mode1
	outi
	ld	c,fladr+6 
	outi	         	;mode0
	ld	c,fladr+4
	ld	a,0dfh   	;alle output-leitungen auf high schalten
	out	(c),a
	ld	c,fladr+6
	outi	         	;mode 3
	outi
	ld	a,5ch		;int.-vektor
	out	(c),a
	outi
	outi
	inc	c
	outi        		;mode3
	outi
	outi

	xor	a
I000E::	LD	(dev),A
	CALL	gettr0		; ist das Geraet lesebereit?
	OR	A
	JR	Z,I001D		; -> ja
I0017::	LD	A,(dev)		; naechstes Geraet
	INC	A
	JR	I000E

; nach ladadr laden von Spur 0/1
;
I001D::
	ld	iy,ladadr	; Ladeadresse
	ld	de,1		; Nr. des ersten zu ladenden Sektors
	ld	bc,ladlen/reclen; Anzahl der zu ladenden Sektoren

I0052::	LD	A,B
	OR	C
	JR	Z,I0074		; -> Bereich ist vollstaendig geladen
	DEC	BC

; 1.-n. Datensatz lesen
;
	PUSH	DE
	PUSH	BC
	CALL	lesueb
	JR	NZ,I0017	; -> naechstes Geraet abfragen
	ADD	IY,BC
	POP	BC
	POP	DE
	INC	DE
	JR	I0052

; es ist alles geladen
;
I0074::	CALL	allaus
	ld	hl,ladadr	; pruefen, ob ein System geladen wurde
	ld	de,kontr
	ld	b,konlen
I0075::	ld	a,(de)
	cp	(hl)
	jr	nz,I0017
	inc	hl
	inc	de
	djnz	I0075
	jp	startad		; geladenes Programm starten
kontr::	defb	0,'@SYS'
konlen	equ	$-kontr
;-----------------------

; Lesen und uebertragen
;   IY - Adresse auf die zu lesen ist
;   DE - abs. Sektornr., des Sektors der zu lesen ist
;
lesueb::PUSH	IY
	LD	A,(dev)
	CALL	lesen
	POP	DE		; aus Lesepuffer auf Zieladresse uebertragen
	PUSH	BC
	LDIR
	POP	BC
	OR	A
	RET
;-----------------------

; alles ausschalten
;
allaus::LD	HL,pdaus

; Ausgabe einer Port/Daten-Liste
;   HL zeigt auf Liste: Port,Datum,Port,Datum,...,0
;
outtab::LD	A,(HL)
	AND	A
	RET	Z
	LD	C,A
	INC	HL
	LD	A,(HL)
	OUT	(C),A
	INC	HL
	JR	outtab

; CRC-Berechnung
;
bercrc::ex	af,af'
	LD	A,084h		; CRC-Anfangswert
	LD	C,0cfh
	PUSH	DE
	ex	af,af'
I00E2::	ex	af,af'
I00E3::	LD	E,A
	INC	HL
	RLCA
	RLCA
	RLCA
	RLCA
	AND	0FH
	XOR	E
	LD	E,A
	RRCA
	RRCA
	RRCA
	LD	D,A
	AND	0E0H
	XOR	(HL)
	XOR	E
	LD	E,A
	LD	A,D
	AND	1FH
	XOR	C
	LD	C,A
	LD	A,D
	RRCA
	AND	0F0H
	XOR	C
	LD	C,E
	DJNZ	I00E3
	ex	af,af'
	dec	a
	ld	b,80h
	jr	nz,I00E2
	ex	af,af'
	OR	C
	POP	DE
	RET
;-----------------------

; Lesen eines mit Sektors von soltrk,solsec
;   in DE absolute Sektornr.
;
lesen::	PUSH	DE
	call	selflo
	POP	HL

	XOR	A		; aus abs. Sektornr. Spur/Sektor machen
	LD	D,A
	LD	E,secanz	; Anzahl der Sektoren pro Spur
	DEC	HL
	LD	B,0FFH
I013A::	INC	B
	SBC	HL,DE
	JR	NC,I013A
	ADD	HL,DE
	INC	L
	LD	H,B
	LD	(solsec),HL

; Laufwerksbereitschaft 8"-Floppy ermitteln
;
	LD	DE,0
	LD	A,06FH		; Kopf laden
	OUT	(0ddh),A
I0225::	IN	A,(0ddh)	; auf /IX warten
	BIT	3,A
	jr	z,I0226		; -> es kam Indeximpuls
	DEC	DE
	LD	A,D
	OR	E
	JR	NZ,I0225
	JP	I02C2		; -> nein, nicht bereit

I0226::	CALL	spursu
	CALL	les2id

I015C::	PUSH	AF
	LD	HL,pdaus0	; AFS abschalten, Kopf geladen lassen
	CALL	outtab
	POP	AF
	LD	HL,datpuf+1
	LD	BC,reclen
	RET
;-----------------------

; Geraet auf Spur 0 fahren
;  in A: LW-Nr.
;
gettr0::LD	HL,pdinit	; AFS initialisieren
	PUSH	AF
	CALL	outtab
	POP	AF
	CALL	selflo
	LD	A,0
	LD	(isttrk),A
	LD	B,8
	CALL	steps
	LD	B,80
	CALL	trk0
	JP	NZ,I02C2	; -> Spur 0 nicht gefunden
	xor	A		; Geraet ist bereit zum lesen
	JR	I015C
;-----------------------

; Floppy selektieren und AFS freischiessen
;
selflo::ld	hl,seltab
	and	3
	ld	e,a
	ld	d,0
	add	hl,de
	LD	A,(HL)
	OUT	(0dch),A	; select Floppy
	ret
;-----------------------

steps::	CALL	stepin
	DJNZ	steps
	RET
;-----------------------

trk0::	IN	A,(0ddh)
	AND	4
	RET	Z
	LD	HL,D038F
	CALL	stepou
	DJNZ	trk0
	INC	B
	RET
;-----------------------

stepin::LD	HL,D0388
stepou::CALL	outtab
	LD	DE,600h

wait::	DEC	DE
	LD	A,D
	OR	E
	JR	NZ,wait
	RET
;-----------------------

spursu::LD	A,(isttrk)
	LD	B,A
	LD	A,(soltrk)
	SUB	B
	JR	Z,I0241
	LD	B,A
	CALL	steps

I0241::	LD	A,(soltrk)
	LD	(isttrk),A

	ld	a,06fh		; Kopf laden
	OUT	(0ddh),A
	LD	DE,1000H
	JP	wait

;-----------------------

; Lesen eines Sektor-ID und eines Daten-ID nach sidpuf und datpuf
;
les2id::LD	E,0FFH
I0264::	LD	C,0d9H		; Datenport Eingabe
	LD	D,5		; Gaplaenge
	LD	HL,sidpuf
	LD	B,7
	ld	a,1		; 1x7 byte lesen
	PUSH	DE
	LD	DE,900H
	CALL	mrksu		; ID lesen
	POP	DE
	CP	0FEH		; Sektor-ID?
	JR	NZ,I02BB	; -> nein

	LD	B,D
I027D::	IN	A,(0d9h)	; gap ueberlesen
	NOP
	NOP
	DJNZ	I027D

	LD	HL,datpuf
	LD	B,83H
	ld	a,reclen/128	; x*80h byte
	PUSH	DE
	LD	DE,250H
	CALL	mrksu		; ID lesen
	POP	DE
	CALL	setber		; Lesen abschalten

	LD	HL,sidpuf-1	; Sektor-ID-CRC richtig?
	LD	B,7
	ld	a,1		; 1x80h
	CALL	bercrc
	JR	NZ,I02BE	; -> nein, weiter versuchen

	LD	A,(sidpuf+1)	; richtige Spurnr.?
	LD	HL,soltrk
	CP	(HL)
	JR	NZ,I02C2	; -> nein, abbrechen

	LD	A,(sidpuf+3)	; richtige Sektornr.?
	DEC	HL
	CP	(HL)
	JR	NZ,I02BE	; -> nein, weiter versuchen

	LD	HL,datpuf-1	; Daten-ID-CRC richtig?
	LD	B,83H
	ld	a,reclen/128	; x*80h
	CALL	bercrc
	JR	NZ,I02BE	; -> nein, weiter versuchen

	xor	a		; alles ok.
	ret

I02BB::	CALL	setber
I02BE::	DEC	E
	JR	NZ,I0264

I02C2::	CALL	allaus
	LD	A,0FFH
	JP	I015C
;-----------------------

; Floppy ruecksetzen (bereit machen)
;
setber::in	a,(0dch)
	or	0d8h
	OUT	(0dch),A	; Lesen abschalten
	RET
;-----------------------

; Marke suchen (FE/FB bei Floppy, AA bei Kassette) und Daten dahinter lesen
;   in  DE - timeout-Zeit beim Markensuchen
;       HL - Pufferadresse
;   out A  - Marke
;
mrksu::	ex	af,af'
	CALL	setber		; Lesen aus
I0314::	and	0bfh		; Lesen ein
	OUT	(0dch),A
I0318::	DEC	D		; auf Marke warten
	JR	Z,I0312		; -> time out; es kam keine
I031B::	DEC	E
	JR	Z,I0318
	IN	A,(0dch)
	AND	20h
	JR	Z,I031B
	ld	c,0d9h

I0309::	IN	D,(C)		; FE/FB lesen
	LD	(HL),D
	INC	HL
	ini
	ex	af,af'
I030D::	nop
I030E::	INI			; Datensatz einlesen
	JR	NZ,I030D
	ld	b,80h
	ini
	dec	a
	jr	nz,I030E

I0312::	LD	A,D
	RET

;-----------------------

; Befehle fuer Schrittausfuehrung
;
D0388::	defb	0ddh,04fh	; ein Schritt in Richtung 77
	defb	0ddh,00fh
	defb	0ddh,04fh
	defb	0

D038F::	defb	0ddh,06fh	; ein Schritt in Richtung 0
	defb	0ddh,02fh
	defb	0ddh,06fh
	defb	0

seltab::defb	0d8h,0dch,0dah,0deh

pdinit::
	defb	87h,0cfh	; Speicherumschaltung initialisieren
	defb	85h,67h
	defb	87h,80h
	defb	0a8h,0		; K3527 abschalten
	defb	0

; Initialisierungsdaten fuer AFS
;
stw::	defb	0fh		; Byte-Ausgabe 
	defb	03      	; int.-sperre
	defb	4fh		; Byte-Eingabe
	defb	03		; int.-sperre
	defb	0fh		; Byte-Eingabe
	defb	0cfh		; Bit-E/A
	defb	20h		; i/o-belegung
	defb	077h		; int.-steuerwort
	defb	0dfh		; int.-maske
	defb	0cfh		; Bit-E/A
	defb	0fh		; i/o-belegung
	defb	03		; int-sper                                                                         title	'floppy-steuerteil  '

pdaus::	defb	0ddh,0ffh	; Kopf entladen
pdaus0::defb	0dch,0dfh	; Selektierung aus
	defb	0

	.dephase

; RAM-Teil des Urladers
; =====================
;
	.phase	0c00h

; Stackbereich
;
	defs	100h,0ffh
spber::	defs	0

; Arbeitsbereiche
;
dev::	defb	0	; 0,3-Kassette; 1-5"Floppy; 2-8"Floppy
solsec::defb	0	; Soll-Spurnr.
soltrk::defb	0	; Soll-Sektornr.
isttrk::defb	0
;
sidpuf::defs	8,0	; Bereich fuer zu lesendes Sektor-ID
;
	.dephase

	.phase	08000h
datpuf::defs	1027,0	; Bereich fuer zu lesendes Daten-ID
	.dephase

	END
